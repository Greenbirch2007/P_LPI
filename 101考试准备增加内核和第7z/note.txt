内核

为了让计算机能有组织而可靠的方式运行，应用软件必须与硬件资源隔离且不可以直接访问
在Linux中，内核(kernel)是唯一能访问硬件资源，管理整体系统的核心软件
它不仅要控制硬件，分配内存，还必须安排进程的执行时机，为应用软件
提供一套程序接口，让它们能间接访问硬件资源

内核状态与模块管理  如何查询内核的状态以及如何管理模块

重建新内核

内核状态与模块管理

在linux系统中，硬件设备的驱动程序可以直接编译进内核。
对于内置了对大多数设备支持的内核，称为单内核(monolithic hernel)

大多数linux发型包随附的是模块化内核(modular kernel).这类内核只内置足以启动的基本驱动程序，其余硬件的驱动程序是以"模块"(module)
的形式躺在硬盘上，可在内核运行时才视情况载入。
模块化设计灵活，除了因应硬件设备得的改变之外，还可以在内核运行时升级驱动软件的版本，完全弥补了单内核的去电

模块化内核需要管理模块

模块文件

Linux的"可加载内核模块"(Loadable Kernel Module,LKM,模块)是由C编译器产生出来的目标文件(object file)
它们尚未被链接成完整的可执行文件，因为它们的链接对象是正在运行中的内核。

大多数模块随着内核一起发布，而且被编译成只适用于该内核。
由于模块与内核的关系密切，你的系统改用新版内核时，必须重新编译出适合该版内核的新模块。
若系统上同时安装了多个版本的内核，在而必须分别安装使用各版本的模块

模块是存放在/lib/moudles/kernel-version/kernel/category/的各子目录下
其中kernel-version是模块所属的内核版本，也是该版本内核在运行时，
uname -r 查询内核版本  ，category是模块的分类 


arch  仅适用于特定平台的模块
crypto  提供加解密运算能力的模块
drivers  硬件驱动程序
fs 各类文件系统
lib  提供常用的功能(如zip压缩算法)
net 网络相关的模块(如防火墙)
sound 音频子系统

常用硬件分类：

block 块设备(以"块"为传输单位的设备，如硬盘)
char  字符设备(以"字符"为传输单位的设备)
input 输入设备
misc 难以归类的设备
net 网络接口
pcmcia  PCMCIA(PC-Card)控制器
scsi SCSI控制器
usb  USB控制器与各分类设备
video: 显卡或任何可被称为Frame Buffer的硬件

操作模块

模块文件----->加载模块 ---->内核

在硬盘上的模块文件必须与当时运行的内核链接在一起才可发挥作用，这样的程序称为加载模块。
通常，模块是被自动加载的，但也需要人工介入

linux提供了一组用来操作模块的工具，能够列出(list),移除(remove)与查询(query)已加载的模块以及插入(insert)新模块到内核。
2.4内核，操作模块的工具收录与modutils包
2.6内核，使用module-init-tools包


lsmod

对于每一个已加载内核的模块，显示其名称，占用的内存大小，用量计次以及其他相关模块。
lsmod所输出的想你想都可以从/proc/modules文件取得

lsmode输出的格式为

模块名称  该模块所占内存空间   该模块的用量计次（也就是多少个其他模块用到了该模块的功能，只有计次值降到0的模块才可以被卸载）
最后一个字段，引用到该模块的其他模块，其数量应该与第三个字段所显示的相等，除非计次值太多(超过4)或其中含有嵌入于内核的模块

有时会看到一个字段出现"(autoclean)" 字样，这表示该模块曾经被加载进内核，但因为没用到，所以内核自动卸载它们，借此节省内存空间

insmod

insmod module [modules_parm]

将指定的module插入(insert)到目前正在运行的内核中。其中的module是模块文件的完整路径或相对路径，
modules_parm是提供给模块的参数。如果要被加载的模块需要其他模块，insmod会告诉你无法解决的符号并直接结束

对于modutils版的insmod,module是模块名称而非文件路径，因为insmod直到如何在模块目录树中找出正确的模块文件

只有root管理者才能执行insmod命令

没有消息就是好消息

insmod是供模块开发者测试个别模块时使用，较少用于实际系统上，因为大多数模块或多或少都会需要用到其他模块的符号
而insmod并没有自动解决未被解析符号(unresolved symbol)的能力

modprobe:应该改用能自动加载相关模块

rmmod

rmmod [options] modules


rmmod能将没用的模块移出内核，只有不在使用中也米有被其他模块引用的模块才可以被卸载。
只有root管理者能卸载模块

rmmod -a移除所有没在使用中的模块

modinfo

modinfo [options] module

找出module所代表的模块文件，从该文件读出该模块文件的信息。有些模块可能不安任何信息，

modinfo -a module  显示模块的作者
modinfo -d 显示关于模块本身的叙述
modinfo -p 显示模块所支持的参数以及参数的类型

modprobe
