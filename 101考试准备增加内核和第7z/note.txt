内核

为了让计算机能有组织而可靠的方式运行，应用软件必须与硬件资源隔离且不可以直接访问
在Linux中，内核(kernel)是唯一能访问硬件资源，管理整体系统的核心软件
它不仅要控制硬件，分配内存，还必须安排进程的执行时机，为应用软件
提供一套程序接口，让它们能间接访问硬件资源

内核状态与模块管理  如何查询内核的状态以及如何管理模块

重建新内核

内核状态与模块管理

在linux系统中，硬件设备的驱动程序可以直接编译进内核。
对于内置了对大多数设备支持的内核，称为单内核(monolithic hernel)

大多数linux发型包随附的是模块化内核(modular kernel).这类内核只内置足以启动的基本驱动程序，其余硬件的驱动程序是以"模块"(module)
的形式躺在硬盘上，可在内核运行时才视情况载入。
模块化设计灵活，除了因应硬件设备得的改变之外，还可以在内核运行时升级驱动软件的版本，完全弥补了单内核的去电

模块化内核需要管理模块

模块文件

Linux的"可加载内核模块"(Loadable Kernel Module,LKM,模块)是由C编译器产生出来的目标文件(object file)
它们尚未被链接成完整的可执行文件，因为它们的链接对象是正在运行中的内核。

大多数模块随着内核一起发布，而且被编译成只适用于该内核。
由于模块与内核的关系密切，你的系统改用新版内核时，必须重新编译出适合该版内核的新模块。
若系统上同时安装了多个版本的内核，在而必须分别安装使用各版本的模块

模块是存放在/lib/moudles/kernel-version/kernel/category/的各子目录下
其中kernel-version是模块所属的内核版本，也是该版本内核在运行时，
uname -r 查询内核版本  ，category是模块的分类 


arch  仅适用于特定平台的模块
crypto  提供加解密运算能力的模块
drivers  硬件驱动程序
fs 各类文件系统
lib  提供常用的功能(如zip压缩算法)
net 网络相关的模块(如防火墙)
sound 音频子系统

常用硬件分类：

block 块设备(以"块"为传输单位的设备，如硬盘)
char  字符设备(以"字符"为传输单位的设备)
input 输入设备
misc 难以归类的设备
net 网络接口
pcmcia  PCMCIA(PC-Card)控制器
scsi SCSI控制器
usb  USB控制器与各分类设备
video: 显卡或任何可被称为Frame Buffer的硬件

操作模块

模块文件----->加载模块 ---->内核

在硬盘上的模块文件必须与当时运行的内核链接在一起才可发挥作用，这样的程序称为加载模块。
通常，模块是被自动加载的，但也需要人工介入

linux提供了一组用来操作模块的工具，能够列出(list),移除(remove)与查询(query)已加载的模块以及插入(insert)新模块到内核。
2.4内核，操作模块的工具收录与modutils包
2.6内核，使用module-init-tools包


lsmod

对于每一个已加载内核的模块，显示其名称，占用的内存大小，用量计次以及其他相关模块。
lsmod所输出的想你想都可以从/proc/modules文件取得

lsmode输出的格式为

模块名称  该模块所占内存空间   该模块的用量计次（也就是多少个其他模块用到了该模块的功能，只有计次值降到0的模块才可以被卸载）
最后一个字段，引用到该模块的其他模块，其数量应该与第三个字段所显示的相等，除非计次值太多(超过4)或其中含有嵌入于内核的模块

有时会看到一个字段出现"(autoclean)" 字样，这表示该模块曾经被加载进内核，但因为没用到，所以内核自动卸载它们，借此节省内存空间

insmod

insmod module [modules_parm]

将指定的module插入(insert)到目前正在运行的内核中。其中的module是模块文件的完整路径或相对路径，
modules_parm是提供给模块的参数。如果要被加载的模块需要其他模块，insmod会告诉你无法解决的符号并直接结束

对于modutils版的insmod,module是模块名称而非文件路径，因为insmod直到如何在模块目录树中找出正确的模块文件

只有root管理者才能执行insmod命令

没有消息就是好消息

insmod是供模块开发者测试个别模块时使用，较少用于实际系统上，因为大多数模块或多或少都会需要用到其他模块的符号
而insmod并没有自动解决未被解析符号(unresolved symbol)的能力

modprobe:应该改用能自动加载相关模块

rmmod

rmmod [options] modules


rmmod能将没用的模块移出内核，只有不在使用中也米有被其他模块引用的模块才可以被卸载。
只有root管理者能卸载模块

rmmod -a移除所有没在使用中的模块

modinfo

modinfo [options] module

找出module所代表的模块文件，从该文件读出该模块文件的信息。有些模块可能不安任何信息，

modinfo -a module  显示模块的作者
modinfo -d 显示关于模块本身的叙述
modinfo -p 显示模块所支持的参数以及参数的类型

modprobe

  modprobe [options] module [symbol=value...]


modproble是insmod与rmmod的综合体，额外加强了自动满足依赖关系的功能。
此外，modprobe不仅能加载单一模块，甚至能加载特定目录下的所有模块。
modproble -r,可以视为加强版的rmmod


加载模块时，可以附加选择性的symbol=value参数
若要加载的模块需要用到其他模块，则那些相关模块会被先加载。
modprobe是依据modules.dep文件来决定模块之间的依赖关系，此文件放在模块目录的顶层(例如，/lib/modules/2.x.x/modules.dep)

所有操作模块的命令都需要root管理者的权限才能执行，modprobe也例外

modprobe -a 加载全部模块。 modprobe -t tag使用时，"全部"是限定到tag所指的目录。
想驱动特定类型的硬件，选项让modprobe逐一尝试加载该类硬件的所有模块，直到记载其中一个位置

若打算加载网卡的驱动程序，可用modprobe -at net逐一尝试j加载 /lib/module/kernel-version/kernel/drivers/net/目录下
的所有模块，直到成功加载一个模块或已经尝试过所有模块为止

modprobe -c 
	显示完整的模块配置，包括默认参数值以及在/etc/modules.conf(或/etc/conf.modules,看你的系统版本而定)
找到的额外参数
modprobe -c 不搭配任何其他选项一起使用
modprobe -l
	列出模块。搭配-t tag使用时，只列出tag所代表的目录下的模块。
	例如，modprobe -lt net会列出/lib/modules/kernel_version/kernel/net目录下(包括其子目录)的所有目模块

modprobe -r
	卸载模块，作用类似于rmmod,但是允许一次指定多个模块

modprobe -t tag
	尝试加载tag所指目录下的各个模块，直到成功加载其中之一或尝试过所有模块位置。
	modprobe -t tag 通常用来“探测”特定类型的硬件(如网卡)
在2.2版内核中，tag是/lib/modules/kernel_version/下的子目录名称
在2.4半内核中，搭配-a选项时，tag必须是完整的目录名称；

modprobe会先加载msdos模块所需的fat模块，然后才加载msdos模块本身

依据modules.dep所记录的依赖关系先自动加载fat模块，然后才加载指定的msdos模块。
模块的依赖关系记录于modules.dep配置文件中：

modprobe就是依据此文件来解决依赖关系。不必自己编辑modules.dep配置文件，
因此该文件实在编译模块的过程中自动产生的

列出所有可用的模块

modprobe -l


设定模块采纳数

某些硬件的驱动模块可接受一些额外参数，比如指定IRQ,DMA,I/O
端口等硬件资源。在加载模块之前或卸载模块之后，也可能需要后处理
一些事前准备工作
额外控制是定义于/etc/modlues/conf配置文件(modprobe会读取此文件)


此文件可能包含下列信息

# ....(注释)
	以井字号(#)开头的行以及任何空白行都会被忽略

keep

	如果keep出现任何path指令之前，则默认路径会保留并
	加到任何命令行所指定的路径

depfile=full_path	
	以full_path代替模块依赖文件(modules.dep)的默认
	位置。例如，depfile=/lib/modules/2.4.30/modules.dep

path=path_directory

	定义模块的搜索路径

options modules optname1 =val1 optname2=val2
	设定module的选项。也可以在modprobe命令行直接指定模块选项。
对于同一个模块，modprobe优先采用命令行指定的选项。
这里的module是没有扩展名(.o或.ko)的单一模块名称。
模块选项是以optname=value的形式给定，其中的optname是该
模块所能接受的参数名称(可用modinfo -p探知这些参数)
options ne2k-pci full_duplex =1

alias  赋予特定模块一个通用的名称

pre-install module command
	加载module之前先执行指定的shell command,
	在加载pcmcia_core模块之前，必须先启动PCMCIA服务

	pre-install pcmcia_core /etc/init.d/pcmcia start


install module command
	在加载module时，使用指定的shell command 来代替默认的模块加载命令

post-install module command

	要求加载module之后执行指定的shell command

pre-remove module command 
	在移除module之前先执行指定的shell command
remove module command
	使用指定的shell command代码默认的模块卸载模块

post-remove module command

	在移除module之后执行的所指定的shell command

较新版本的linux disribution的/etc/modules/conf配置文件是由modules-update
自动产生的，该文件会将/etc/modules.d/目录下的各配置文件
整合成一个完整的/etc/modules.conf。对于这类系统，不应该直接修改/etc/modules.conf,
而是应该修改/etc/modules.d/目录下的文件，然后再执行modules-update 来更新/etc/modules.conf

模块依赖文件

模块之间的依赖关系记录在一个模块依赖文件(module dependency file)中，其位置是在/lib/modules/kernel-version/modules.dep
modeprobe 就是依据此文件来判断模块之间的相关性，借此算出正确的模块加载顺序。

在modules.dep文件中的依赖关系语句

这表示msdos模块需要用到fat模块索引应该也加载fat,然后才可加载msdos模块

可用于系统的所有模块会全列在modules.dep文件中。所有模块都是以其完整路径与完整文件名(包括.o或.ko)来表示。可以单独
存在而不需其他模块配合的模块，只会出现模块文件名称，冒号后的dependency是空的。
使用modprobe加载特定模块时，它会先加载每一个depnendency,最后才加载所指定的模块

modules.dep文件里的依赖关系记录必须符合现况，才能确保modprobe的顺利运作。如果模块之间的依赖关系有任何关系，却
没有跟着修改modules.dep,则modprobe可能会失败，因为它无法满足依赖关系。因此，在每次开机时，
modules.dep文件就会被重建一次。
在大部分的Linux中，应该可以在rc.sysinit(或其他等效脚本)看到调用depmod -a命令

depmod -a会重建modules.dep文件并覆盖掉旧文件。
只要有任何模块依赖关系发生改变，你都可以自己动手运行此程序，不必非等到下次重新开机不可

modules.dep文件


重新新内核

linux是开源操作系统，linux内核是以源程序的形式来发布的，这表示任何人都可以为自己的系统编译一个专用的linux内核，使其将硬件功能
发挥到极致。

关于内核的基础只是

编译出自己的新内核

内核版本

不管规模大小，几乎任何软件项目都有一套版本编码规则，
而且大多数是采用数字编码。
linux内核也不例外，其版本编码规则如下：
major.minor.patchlevel

主版本号(major release)

次版本号(minor release)

	次版本号代表显著的改变与加强，值得以新号码来表示。Linux
	内核的版本有两种：
	偶数版，奇数版

修正版次(patch level)
一般，使用修正版次最高的内核应该是最保险的

必备工具与软件

编译一个专属内核所需要的开发工具包括C编译器，汇编器(assembler)
链接器(linker)和make工具程序。通常，这些工具应该已经在你的系统中了

C编译器是一种程序，能将C源代码转换成系统可用的二进制形式。
GNU C Compiler(gcc)是大多数linux系统上的标准编译器。
至于assembler和linker则是编译内核的某些过程所需的工具

编译程序是由make所控制的，它依据Makefile文件所记录的
依赖关系，自动以正确顺序和适当的参数来执行编译命令

编译工具之外，最红要的是内核源代码

kernel-source 
	此包包含内核与模块的C语言源代码

kernel-headers
	此包包含内核的C语言图文件(header file)
	大部分的C程序将所需的数据结构与常数另外定义在头文件
	中，内核程序也不例外。在2.4版之后的内核中，头文件
	不再另外封装成一个独立包，而是一并封装在kernel-source包内


就大多数系统而言，内核的源代码是放在/usr/src/linux/目录下，
/usr/src/linux/多半只是一个软链接，连到正在使用的内核版本。

查看内核系统
ls -l /usr/src

在一个安装了多个版本内核的系统上，其/usr/src/目录如下

/usr/src/linux是一个内核目录的软链接，让/usr/src/linux
指向正确版本的内核源代码树。
因为许多跟内核有关的软件都假设内核源目录树是位于/usr/src/linux

要知道kernel source tree的存放位置(通常是/usr/src/linux)


编译一个专属内核

假设开发环境都已经具备，包括C编译器，make工具，内核源代码(包括头文件)
都已经装好。在编译与安装内核的过程中，都是以root身份进行


创建内核配置

创建内核的第一步是创建一个.config文件，此文件含有内核的选项，
像是文件系统，SCSI,网络功能支持等
许多功能可以直接编译到内核，也可以编译成模块
对于每一个配置选项，有三种选择

1.编译仅内核(回答"yes")
2. 编译成模块(回答"m")
3. 不想要该功能(回答"no")


某些功能是有关联的，你的选择会影响到相关功能
若决定要让内核支持SCSI，一些与SCSI相关的驱动程序与功能
也会跟着浮现，要求做出选择。你所作出的所有选择都会被存如/usr/src/linux/.config
它是一个普通的文本文件，对于每一个选项，都有一个对应的shell变量，这些shell变量的
值(y,n,m)就是所作出的选择


在开始之前，先将当前的工作目录切换到 kernel source tree的等车呢过

cd /usr/src/linux

linux开发者有三种产生.config方法
1.make config :适用于只有文字显示能力的终端机
2. make menuconfig : 适用于支持curses library TUI环境的文字终端机
3. make xconfig:适用于 X Window System

make config

用make config来设定内核配置。在开始执行make config之后，系统会逐一问你每一个内核选项
你必须决定回答y,m,n(分别代表yes,module,no)


make menuconfig

make menuconfig 会建立一个文本模式的菜单环境，让你可用方向键选择向指定的项目
make menuconfig利用curses library(一套终端光标操作指令的标准函数库)
依据终端机的能力(所用的终端机类型)来产生适当的菜单换面。


make xconfig


如果处在X Window System环境下，使用make xconfig会出现一个GUI菜单窗口

make oldconfig以现有的.config为基础来产生新内核配置，已有在遇到先前没设定的选项时，才会与用户交互。

使用menuconfig或xconfig时，若不修改任何选项而直接选择保存，其效果如同oldconfig,
会产生一个默认的.config配置文件


内核编译实例

Code maturity level options

	让你决定要不要提示尚在研发中的驱动程序

Loadable module support
	让你决定是否要让内核能在运作时加载模块

Processor type and features
	选择CPU 形式，是否要支持SMP以及内存选项。

General setup
	是否要支持网络，要支持哪些总线以及电源管理


Networking options
	各种网络协议的支持


ATA/IDE/MFM/RLL support
	IDE设备的支持。启动盘所在的控制接口，其驱动程序必须内置于内核，
	而不能编译成模块形式

SCSI support
	SCSI与SATA设备的支持。如果你的系统从SCSI或SATA硬盘启动，
	则控制器的驱动程序也必须内置于内核

File systems
	Linux支持各种文件系统，对于启动盘所用的文件系统格式的支持必须内置于内核，不应该编译为模块



make clean
	移除前次编译过程所遗留下来的任何输出文件，包括core文件，.o文件，system map文件等。
	要编译一个"干净"的新内核，必须先摆脱前次编译过程的影响

make dep

	检验源文件(.c)与其头文件(.h)的依赖关系，并在每个含有源文件的目录下各产生一个.depend文件，
	记录该目录下的"目标文件"(.o),"源文件"(.c)与"头文件"(.h)的依赖关系。
	在后续的make操作中，会用到这些文件来确保头文件的改变会被编译入新的"目标文件"。


make bzImage
	一个可启动的内核镜像文件，就是这个步骤产生出来，其名称为bzImage(因为经过bzip2压缩过)
	启动时期所需的一些额外支持文件也是在此步骤产生的。
	此步骤可能是整个编译过程中最耗时间的。如果你据诶到哪个让大部分功能都编译成模块

make modules
	驱动程序与其他可以模块化的功能就是由此步骤产生的

make modules_install

	将make modules所编译出来的所有模块安装到/lib/modules/kernel-version/目录下
	此步骤会自动在/lib/modules/目录下创建一个名称为Version.Patchlevel.Sublevel.ExtraVersion的目录
	然后将模块复制到正确的目录下



安装新内核

刚编译好的新内核还是必须被妥善安装，才能让系统在下一次开机时顺利启动新内核。
安装内核镜像文件的步骤其实无关内核版本，
但是与你所用的boot loader(LILO 或GRUB)相关，
无论使用哪种boot loader,第一步是将内核镜像文件复制到/boot目录下

除了内核镜像文件之外，还会将.config与system map也放一份在/boot目录下


最后执行lilo(map install)命令，让LILO能找到你指定的新内核

启动，初始化，关机与运行级别呢

硬件初始化过程始于CPU开始执行BIOS ROM的第一个指令，
结束于boot loader 准备开始启动操作系统。在这过程中，BIOS要检车出所有外围
设备(比如，检测系统上安装了多少容量的内存，
安插了多少片扩展卡，有哪些控制芯片存在等)并将它们设定成已知状态
(将内存内容全部归零，清空I/O芯片的缓冲区，设定
控制芯片的操作模式等)

类似的初始化过程也发生操作系统的启动过程中，整个过程从BIOS
将CPU控制权交给boot loader开始，直到操作系统等待用户下达命令
位置。
这里的"启动""初始化"，主要就是指启动操作系统的这段过程，而非BIOS
所主导的硬件初始化过程

启动过程

系统启动过程，这包括boot loader的操作，如何提供启动参数
给Linux内核以及如何检查启动过程于日志文件中留下的信息


运行级别，关机与重新启动

要知道如何runlevel,包括如何进入单用户模式，关机，重新启动以及
改变runlevel的注意事项


启动系统


当BIOS完成硬件初始化之后，接手启动操作系统的软件是boot loader,
linux系统常用的boot loader是LILO与GRUB,它们不仅能将linux
内核镜像文件加载到内存，还可以传递一些辅助信息给linux内核，
这类信息称为内核参数(kernel parameter)


启动时期的内核参数

默认情况下，linux内核的参数是写在boot loader的配置文件
(/etc/lilo.conf或/boot/grub/menu.lst)

除此之外，linux内核也能接受用户通过boot loader传来的命令行参数
boot loader 通常会有一个开机画面，让你选择索要启动的linux内核
(或其他操作系统)。在这个画面上，可以传递参数给linux内核，
GRUB也可以让你在启动Linux内核之前编译要传给内核的参数。只要在GRUB
显示开机菜单时，先选定所要启动的内核，然后按下e键(代表"edit")
来编辑该内核的命令行，最后按下b(代表"boot")来启动

你所指定的参数要放在内核镜像名称之后，其形式可能是单词(像是ro)
也可能是name=value之类的形式(像是root=/dev/hda2)

不要忘记，同时指定多个参数时，必须之间需以空格隔开


内核模块的配置

今日的linux内核采用模块化(modular)结构，以往要编译进内核里的程序
(例如，声卡的驱动程序)限制则可以被分离出来，称为单独的模块
可在需要时才动态加载，也可以在用不到时被移出内核。然而，boot loader
无法提供参数给模块，因为boot loader是在linux内核启动之前执行的，
而模块是在linux核心启动之后才开始活动。
若要传送参数给内核模块，除了在加载模块的modprobe命令行直接指定
还可以在/etc/modules.conf配置文件中预先给定


用于驱动特定硬件的模块通常会需要跟硬件资源有关的参数，像是I/O地址
IRQ与DMA信道。对于PCMCIA(PC-Card)驱动程序，可能还需要一些内外的

boot loader只能提供内核参数，而模块的参数是通过modules.conf配置文件提供


内核的启动时信息

当Linux内核启动时，会将启动过程产生的信息送到控制台(console)
此外，当模块被加载时，也会产生类似的信息。
这些信息含有硬件健康状态，设定值的重要线索。

1. 内核的识别信息(比如版本编号)
2. 内存与CPU的信息
3. 所检测到的硬件以及信息，像是串行端口，磁盘驱动器，分区代号

4. 分区信息与检查工具提供的建议
5. 网络的初始化信息
6. 内核启动时加载模块所产生的信息

这些信息是显示于启动期间的控制台，

使用dmesg | less可以重现最近一次的启动信息

由于这些信息是保留在暂存区，而暂存区的容量是固定的，在内核
运作时还会持续产生新信息，当信息量超过暂存区容量，最早的
旧信息便会被丢弃。
管理者会利用dmesg来将启动信息保留于文件中，以便日后查看或留作 备份


查看系统日志

系统平常运作时，内核所产生的信息会被syslog记录于系统日志文件中，
通常是/var/log/messages文件，看实际的syslog设定方式而定



dmesg可让你直到网卡硬件是否被适当地初始化，但是关于网卡的运作状态(如，
网线插头掉落时或收到怪异的封包时)则是记录在系统日志文件里
当管理者需要检测网络问题时，就可能需要同时参考到dmesg与系统日志文件里的嘻嘻


系统日志文件里的信息有固定的格式，通常前两到三个字段是日期和时间，接着
是主机名称以及信息的程序名称，其余才是信息本身。
利用对于信息字段的认知，我们可以截取出特定程序或某段时间范围内的信息，
或含有特定关键字的信息

dmesg | grep kernel

可以grep筛选出kernel(内核)传给syslog的信息


当管理者在发掘系统问题是，会需要持续关注系统日志的变化，在这种情况下，
可利用tail的无关能力来观察日志信息


由于信息是被持续附加到日志文件末端，每当有新信息进来时，tail就会将它们显示出来

运行级别，关机与重新启动

运行级别(Run Level)

linux有运行级别的概念，通过控制实际启动的服务组合而改变系统的用途。
linux系统定义了7个运行级别，以数字0到6表示

其中0和6都是过渡性的特殊级别，分别代表关机(shutdown)与重新启动(reboot)

如果要求Linux进入级别0，则会进行关机程序
若切换到级别6，则会重新启动

随linux发行包不同，通常会有一个用于维护系统的运行级别(通常称为单用户模式)

一个没有X11但是包含大多数系统服务的运行级别(通常称为多用户模式或服务器模式)
以及一个会提供GUI登录画面的全功能运行级别(可能称为窗口模式或桌面模式)

debain,redhat的运行级别定义

运行级别   说明

0  	关机，切断系统的电源。这是过渡性的运行界别，不能成为默认的运行级别
	否则会造成“开机后立刻自动关机”的窘境


1(或s,S)  单用户模式(single-user)或维护模式。此模式通常只含恰好足以支撑
	系统基本运行而不妨碍维护工作的基础服务


2	多用户模式。这是Debian的默认级别。对于redhat,这是不提供NFS
	文件共享服务的多用户模式

3 	在redhat中，这是默认的全功能多用户模式，但不含X11服务。
	debian不使用此级别

4	一般不使用此级别
5	debian不使用此级别，对于redhat，这是全功能的多用户的模式，
	外加GUI登录服务。


6 	重新启动，仅供系统管理者使用。本级别也是过渡性的，所以
	不可当成默认界别，否则系统将会不断地重新启动




初始化程序


负责引导运行级别的进程是init(PID 1)，也就是linux内核启动之后所执行的第一个进程。
init的配置文件---/etc/inittab(初始表)，定义了各种运行级别的初始化程序。


实际的系统初始化程序随各家Linux版本而已

/etc/inittab中的字段定义


字段名称  意义

id  	初始化程序的标识符。由1到4个字符构成，不过
	为了兼容性，不建议使用超过2个字符的标识符
runlevels 应该运行该初始化程序的运行级别。例如，2345表示系统进入运行级别2,3,4或5	
		时，都要运行该初始化程序

action   初始化程序的运行方式。
process 	启动初始化程序的命令，包含完整的程序文件路径以及相关参数


初始化程序的典型运行方式


关键字  	意义
respawn	 当程序结束时自动予以重新启动
wait   	只有在进入指定的运行级别时才会运行一次程序，而且init	必须等到
	程序结束，才可继续运行下一个程序
once	进入指定的运行级别时会运行一次程序，但init不会等待程序结束

boot 	只有在系统开机时运行一次。runlevels字段无效

bootwait	只有在系统开机时运行一次，而且init必须等到程序结束。runlevels字段无效
initdefault 	内核启动之后，默认进入的运行级别。process字段无效
sysinit	 	程序在系统启动时会运行一次，其实际在任何boot或bootwait程序之前。runlevels字段失效

powerwait	程序在关机过程中运行一次。init会等待程序结束，才运行下一个程序。
		这是为了搭配UPS(不断电系统)的运行方式

powerfail	效果类似powerwait,只差init不会等待程序结束
ctrlaltdel	当init收到SIGINT信号时(发生在用户同时按下CTRL+ALT+DEL组合键时)才运行指定的程序

它定义了此系统的默认运行级别为3
initdefault这个关键字会使得init忽略该行的process字段
当init没收到任何额外指示的情况下，就会进入initdefault所指出的运行界别，
对于一般用途的linux版本，默认运行级别不是2就是3
如果你的系统主要偏向于桌面应用，你可能会想要将默认级别改为5

系统初始化

sysinit:/etc/rc.d/rc.sysinit

它定义系统初始化程序为/etc/rc.d/rc.sysinit
sysinit所指的脚本是init在运行任何程序之前，会优先执行的第一个脚本，这就是为什么sysinit关键字会使得runlevel字段失效的原因

并非所有linux版本的系统初始化程序都是/etc/rc.d/rc.sysinit.但是它们所执行的工作都是类似的
不外乎显示出系统版本，设定终端机，设定键盘配置，检查网络功能，设定主机名称

运行级别的初始化

当init完成系统初始化工作之后，接下来会进行单个级别的初始化


各运行级别的初始化程序都是由/etc/rc.d/rc负责，此脚本会获得一个代表当前运行级别的数值参数。
如果仔细观察/etc/rc.d/rc的内容，可发现进入运行级别n时，
它会执行/etc/rc.d/rcn.d/目录下的各个SnnService脚本(nn是执行顺序，数值低者有限；Service是服务的名称)
若是离开运行级别n时，则是执行/etc/rc.d/rcn.d/目录下的各个KnnService脚本


虚拟控制台

init的另一个作用是建立一系列虚拟控制台(virtual console)

可以用alt+Fn组合键在各控制台之间切换，init才会在用户注销之后(也就是结束/sbin/mingertty程序时)自动重新启动该控制台，
重新显示登录画面

关机与重新启动

init有拦截CTRL+ALT+DEL按键组合的能力，当用户按下这三个键时，便会运行ctrlalttdel关键字有所制定的程序：

shutdown

	shutdown [options] time [warning message]

shutdown 可以用来关闭系统。在默认情况下，shutdown会将系统带进单用户模式，但是它也提供了关机与重新启动的选项。其实
shutdown是以适当的runlevel自变量来调用init,借此达到影响系统的效果
time参数让shutdown知道何时开始运行关机程序，可用hh:mm格式来表示特定时间点或以+n格式表示从此刻开始的若干分钟后，
也可以用关键字now来表示立刻进行。
如果time被设定成超过15分钟，shutdown会在关机前15分钟对用户发出首次的关机通告
time是必要参数，如果没有指定，shutdown可能会有意外的效果

如果你提供了warning message信息(一字符串)，该信息将会被用在系统发送给一般用户的关机通告中。此信息可以不必加注引号，除非
信息中包含特殊字符，像是*或&

shutdown -f 快速开机。此选项会使得下次开机时略过文件系统的检查
shutdown -F 强迫系统于下次开机时检查文件系统
shutdown -h 关闭系统后切断电源
shutdown -k 不关闭系统，仅送出警示信息
shutdown -r  重新启动

由于"立刻关机"与"立刻重新启动"很常用，所以有些系统为这两个命令分别创建了poweroff,reboot

改变运行级别

runlevel查看当前的运行级别

第一个字段代表前次的运行级别，第二个字段是现在的运行级别。N表示前次的级别与现在的一样，没有变过。
对于一个前次运行级别为3目前为5的系统，runlevel会给你答案

直到了当前或前次的运行级别之后，可利用init或telinit命令来改变运行级别。
telinit通常是init的硬链接或软链接，两者的用法与作用是完全相同的。
所以只针对init作说明

init进程(PID 1)是系统上所有进程的"终极始祖"，当你下达init命令时，它会传送信号给init进程，要求init进程变更运行级别。
只有root才有权使用init命令


init n

n是新运行级别的编号，它可以是返回从0到6的整数，或字母S,s，q.字母S与s
都是指单用户模式，也就是与运行级别1等效的，字母q会让init重新读取/etc/inittab配置文件

系统立刻关机  init 0
init,telinit可以交替使用，因为它们会指向同一个文件

如果你使用的是个人linux工作站，不会有其他用户登录，系统也不会对外提供文件或其他资源的共享服务，那么你可以

管理者有责任在系统有任何重大变动之前通知用户。使用init来关闭系统并不会自动帮你


单用户模式

运行级别1 ----单用户模式，是一个基本的操作环境，专供系统维护之用。
此模式会挺尸网络功能并关闭任何可能影响系统维护工作的服务，因为迫使管理者进入单用户模式的主要原因，
就是系统无法自动处理文件系统毁坏的问题而需要管理者进入予以修复d

用户改变运行级别的命令是init n.
init 1 可以进入单用户模式

